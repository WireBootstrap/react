/****************************************************************
    Buttons
****************************************************************/

interface IWireButtonsConfigDataMap {
    /**
    * The field in the data to be used as the unique id for buttons
    */ 
    id?: string;
    /**
    * The field in the data to be used as the display label for the buttons
    */ 
    label?: string;
    /**
    * The field in the data to determine whether a button should be selected by default.
    */ 
    selected?: string;
}

interface IWireButtonsConfig extends IWireComponentConfig {
    /**
    * Map the field names in the data to the names required by the component.  
    * All fields are optional if the names in the data are the same as the ones in the datamap.
    */ 
    datamap?: IWireButtonsConfigDataMap;
    /**
    * Orientation of the buttons.
    * @defaultvalue 'horizontal'
    */ 
    alignment?: 'horizontal' | 'vertical';
    /**
    * Allow multiple buttons to be selected at the same time
    */ 
    multiselect?: boolean;
    /**
    * CSS color class.
    * @defaultvalue btn-primary    
    */ 
    color?: string;
}

/**
 * Bootstrap buttons component for WireBootstrap
 * @see https://docs.wirebootstrap.com/components/bootstrap/buttons
 */
interface IWireButtonsComponent extends IWireComponent {
    new(): IWireButtonsComponent;
    /**
     * Render the buttons inside the component
     * @param selector id or jQuery of a DOM element into which the component will be rendered
     * @param config Configuration for the component
     */
    render(selector: any, config: IWireButtonsConfig): IWireButtonsComponent;
    /**
     * Returns the configuration for the component
     */
    config(): IWireButtonsConfig;
}

/****************************************************************
    Input
****************************************************************/

interface IWireInputConfigDataMap {
    /**
    * The field in the data to be used as the value for the &lt;input&gt; textbox.
    */ 
    value?: string;
}

interface IWireInputConfigEvents extends IWireComponentConfigEvents{
   /**
    * Raised when a value is changed in the component
    */ 
    change?: WireComponentEvent;
}
interface IWireInputConfig extends IWireComponentConfig  {
    /**
    * Specify a static value for the &lt;input&gt; textbox instead of using a dynamic data field.
    */ 
    value?: any;
    /**
    * Map the field names in the data to the names required by the component.  
    * All fields are optional if the names in the data are the same as the ones in the datamap.
    */ 
    datamap?: IWireInputConfigDataMap;
    events?:IWireInputConfigEvents;
}

/**
 * Bootstrap Input component for WireBootstrap
 * @see https://docs.wirebootstrap.com/components/bootstrap/input
 */
interface IWireInputComponent extends IWireComponent {
    new(): IWireInputComponent;
    /**
     * Render the value inside the input component
     * @param selector id or jQuery of an &lt;input&gt; element into which the component will be rendered
     * @param config Configuration for the component
     */
    render(selector: any, config: IWireInputConfig): IWireInputComponent;
    /**
     * Returns the configuration for the component
     */
    config(): IWireInputConfig;
    /**
     * Validates the value in the input
     */
    validate(): boolean;
    /**
     * Returns or sets the value for the input
     */
    val(value?: any): any;
}

/****************************************************************
    Table
****************************************************************/

interface IWireTableConfig extends IWireComponentConfig {        
    /**
    * Determines whether field filters can be used on columns at the top of the table
    */ 
   filter?: boolean;
    /**
    * Determines whether the column headings are displayed
    */ 
    header?: boolean;
    /**
    * Message displayed when no records are returned
    * @default No rows returned.
    */ 
   noRowsMessage?: string;
}

/**
 * Bootstrap HTML Table component for WireBootstrap
 * @see https://docs.wirebootstrap.com/components/bootstrap/table
 */
interface IWireTableComponent extends IWireComponent {
    new(): IWireTableComponent;
    /**
     * Render the data inside the table
     * @param selector id or jQuery of a &lt;table&gt; element into which the component will be rendered
     * @param config Configuration for the component
     */
    render(selector: any, config: IWireTableConfig): IWireTableComponent;
    /**
     * Returns the configuration for the component
     */
    config(): IWireTableConfig;
}

/****************************************************************
    Search list
****************************************************************/

interface IWireSearchListConfigDataMap {
    /**
    * The field in the data to be used as the unique id for list
    */ 
    id?: string;
    /**
    * The field in the data to be used as the display label for the list
    */ 
    label?: string;
}

interface IWireSearchListConfig extends IWireComponentConfig {
    /**
    * Map the field names in the data to the names required by the component.  
    * All fields are optional if the names in the data are the same as the ones in the datamap.
    */ 
    datamap?: IWireSearchListConfigDataMap;
}

/**
 * Bootstrap Checkboxes component for WireBootstrap
 * @see https://docs.wirebootstrap.com/components/bootstrap/search-list
 */
interface IWireSearchListComponent extends IWireComponent {
    new(): IWireSearchListComponent;
    /**
     * Render the list inside the component
     * @param selector id or jQuery of a DOM element into which the component will be rendered
     * @param config Configuration for the component
     */
    render(selector: any, config: IWireSearchListConfig): IWireSearchListComponent;
    /**
     * Returns the configuration for the component
     */
    config(): IWireSearchListConfig;   
}


/****************************************************************
    Checkboxes
****************************************************************/

interface IWireCheckboxesConfigDataMap {
    /**
    * The field in the data to be used as the unique id for checkboxes
    */ 
    id?: string;
    /**
    * The field in the data to be used as the display label for the checkboxes
    */ 
    label?: string;
    /**
    * The field in the data to determine whether a checkbox should be selected by default.
    */ 
    checked?: string;
}

interface IWireCheckboxesConfig extends IWireComponentConfig {
    /**
    * Map the field names in the data to the names required by the component.  
    * All fields are optional if the names in the data are the same as the ones in the datamap.
    */ 
    datamap?: IWireCheckboxesConfigDataMap;
    /**
    * Checkbox type
    * @defaultvalue checkbox
    */ 
    type?: "checkbox" | "radio" | "switch";
}

/**
 * Bootstrap Checkboxes component for WireBootstrap
 * @see https://docs.wirebootstrap.com/components/bootstrap/checkboxes
 */
interface IWireCheckboxesComponent extends IWireComponent {
    new(): IWireCheckboxesComponent;
    /**
     * Render the checkboxes inside the component
     * @param selector id or jQuery of a DOM element into which the component will be rendered
     * @param config Configuration for the component
     */
    render(selector: any, config: IWireCheckboxesConfig): IWireCheckboxesComponent;
    /**
     * Returns the configuration for the component
     */
    config(): IWireCheckboxesConfig;
}


/****************************************************************
    Select
****************************************************************/

interface IWireSelectConfigDataMap {
    /**
    * The field in the data to be used as the unique id
    */ 
    value?: string;
    /**
    * The field in the data to be used as the display label
    */ 
    label?: string;
    /**
    * The field in the data to determine which value should be selected
    */ 
    selected?: string;
}

interface IWireSelectConfigEvents extends IWireComponentConfigEvents{
    /**
    * Raised when a selection is made
    */ 
  change?: WireComponentEvent 
}

interface IWireSelectConfig extends IWireComponentConfig {
    /**
    * Map the field names in the data to the names required by the component.  
    * All fields are optional if the names in the data are the same as the ones in the datamap.
    */ 
    datamap?: IWireSelectConfigDataMap;
    /**
    * This item provides a "no selection" behaviour.  When selected, it sends out a *clear* action on the *dataselect*
    * event removing any selctions for the field in the component in any query on the page.  
    * This value should have the same schema as the *datamap* property.
    */ 
    all?: IWireSelectConfigDataMap;
    /**
    * Overrides the selected datamap field to determine the default selected value
    */
    selected?: string | number;
    events?:IWireSelectConfigEvents;
}

/**
 * Bootstrap Select component for WireBootstrap
 * @see https://docs.wirebootstrap.com/components/bootstrap/select
 */
interface IWireSelectComponent extends IWireComponent {
    new(): IWireSelectComponent;
    /**
     * Render the select component
     * @param selector id or jQuery of a &lt;select&gt; element into which the component will be rendered
     * @param config Configuration for the component
     */
    render(selector: any, config: IWireSelectConfig): IWireSelectComponent;
    /**
     * Returns the configuration for the component
     */
    config(): IWireSelectConfig;
    /**
     * Returns the currently selected value
     */
     val(): any;
}



/****************************************************************
    Modals
****************************************************************/

/*
  Message
*/

/**
 * Returns control back to modal
 * @param keepOpen Keep the modal up after returning from this callback
*/
type WireBsMessageModalCallbackReturn = (keepOpen?: boolean) => void;

/**
 * Optional callback when a button is clicked
 * @param ok True if the user pressed the Ok button. False if they clicked Cancel.
*/
type WireBsMessageModalCallback = (ok: boolean, callback: WireBsMessageModalCallbackReturn) => void;

type WireBsMessageModal = (config: IWireBsMessageModalConfig) => Promise<boolean>;

interface IWireBsMessageModalConfigOkButton {
    /**
    * The label for the Ok button
    * @default Ok
    */
    label?: string;
    /**
    * CSS color class(s) for the Ok button
    * @default btn-secondary
    */
    css?: string;        
  }

interface IWireBsMessageModalConfigCancelButton {   
    /**
    * The label for the Cancel button
    * @default Cancel
    */
    label?: string;    
    /**
    * Determines whether the Cancel button is displayed
    * @default false
    */
    visible?: boolean;
    /**
    * CSS color class(s) for the Cancel button
    * @default btn-secondary
    */
    css?: string;    
  }

interface IWireBsMessageModalConfig {
    /**
    * The message to show in the modal
    */
    message: string;
    /**
    * The title for the modal  
    * @defaultvalue Message
    */
    title?: string;
    /**
    * CSS color class(s) for the modal
    * @default alert-primary
    */
    css?: string;
    /**
    * Ok button configuration
    */
    ok?: IWireBsMessageModalConfigOkButton;
    /**
    * Cancel button configuration
    */
    cancel?: IWireBsMessageModalConfigCancelButton;
    /**
    * The function to be called when a button is clicked
    */
    callback?: WireBsMessageModalCallback;
  }


/****************************************************************
    IWireBootstrap Interface
****************************************************************/

/**
 * Bootstrap components for WireBootstrap
 * @see https://docs.wirebootstrap.com/components/bootstrap
 */
//BootstrapComponents
 interface IWire {
    /**
     * Bootstrap buttons component for WireBootstrap
     * @see https://docs.wirebootstrap.com/components/bootstrap/buttons
     */
    bsButtons: IWireButtonsComponent;
    /**
     * Bootstrap HTML Table component for WireBootstrap
     * @see https://docs.wirebootstrap.com/components/bootstrap/table
     */
    bsTable: IWireTableComponent;
    /**
     * Bootstrap Input component for WireBootstrap
     * @see https://docs.wirebootstrap.com/components/bootstrap/input
     */
    bsInput: IWireInputComponent;
    /**
     * Bootstrap Searh List component for WireBootstrap
     * @see https://docs.wirebootstrap.com/components/bootstrap/search-list
     */
    bsSearchList: IWireSearchListComponent;
    /**
     * Bootstrap Checkboxes component for WireBootstrap
     * @see https://docs.wirebootstrap.com/components/bootstrap/checkboxes
     */
    bsCheckboxes: IWireCheckboxesComponent;
    /**
     * Bootstrap Select component for WireBootstrap
     * @see https://docs.wirebootstrap.com/components/bootstrap/select
     */
    bsSelect: IWireSelectComponent;
    /**
     * Bootstrap modal dialog for messages in WireBootstrap
     * @see https://docs.wirebootstrap.com/components/bootstrap/modals/message
     */
    bsMessageModal: WireBsMessageModal;
    /**
     * Bootstrap modal dialog for errors in WireBootstrap
     * @see https://docs.wirebootstrap.com/components/bootstrap/modals/error
     */
    bsErrorModal(exception: any): void;
}
