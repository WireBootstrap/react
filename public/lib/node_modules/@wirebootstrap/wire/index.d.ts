type WireDataTableCallBack = (data: any, textStatus?: any, jqXHR?: any) => void;
type WireExceptionCallBack = (exception: any) => void;

type WirePromiseDone = (callback: WireDataTableCallBack) => IWirePromise;
type WirePromiseFail = (callback: WireExceptionCallBack) => IWirePromise;
type WirePromiseAlways = (callback: Function) => IWirePromise;


interface IWireDataCallback {
  data: any;
  ex: any;
}

interface IWireDataTableCallback {
  table: IWireDataTable;
  ex: any;
}

type DataTableCallback = (d: IWireDataTableCallback) => void;

type DataTableColumnCalc = (row: any, index?: number, table?: IWireDataTable) => void;


/**
* Returned from asyncronous calls to data services
*/
interface IWirePromise {
  /**
  * Called when the service call returns successfully
  */
  done: WirePromiseDone,
  /**
  * Called when the service call fails
  */
  fail: WirePromiseFail,
  /**
  * Call when the service call returns in either a success or failed state
  */
  always: WirePromiseAlways
}

type WireDataSource = {
  /**
  * The service provider's configuration
  */
  Provider?: any;
  /**
  * The root URL to the data service
  */
  ServiceRoot?: string;
  /**
  * Ajax options to apply when making data service calls
  */
  Ajax?: any;
  /**
  * The data model to use with the data returned from the data service
  */
  Model?: IWireDataModel;
}

/**
* WireBootstrap wire.data.DataSource class
@see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.data/wire.data.datasource
*/
interface IWireDataSource extends WireDataSource {
  new(): IWireDataSource;
  /**
  * The provider and configuration constructor
  * @param provider The service provider key that determines the data source service provider to use to making service calls
  * @param config The configuration for the data source
  */
  new(provider: string, config: WireDataSource): IWireDataSource; 
  /**
  * Asynchronous call to the data serice to execute a query.  This method does not pause the thread.
  * @param query Query to execute in the data service 
  * @param options Options to pass with call to the data service.  Most of these settings will be service provider specific.
  */
  execAsync(query: IWireQuery, options?: any): IWirePromise;
  /**
  * Synchronous call to the data serice to execute a query.  This method waits until the call returns before continuing.
  * @param query Query to execute in the data service 
  * @param options Options to pass with call to the data service.  Most of these settings will be service provider specific.
  */
  exec(query: IWireQuery, options?: any): any;
  /**
  * Returns a reference to the service provider object servicing requests to the data service.
  */
  serviceProvider(): any;
  /**
  * Synchronous call to persist data in the data service.
  * @param entity The table or other entity in the data service to be updated
  * @param data The data to send to the data service for persisting
  * @param options Options to pass with call to the data service.  Most of these settings will be service provider specific.
  */
  write(entity: string, data: any, options: any): Array<any>;
  /**
  * Synchronous call to persist data in the data service.
  * @param entity The table or other entity in the data service to be updated
  * @param data The data to send to the data service for persisting
  * @param options Options to pass with call to the data service.  Most of these settings will be service provider specific.
  */
  write(entity: string, data: any, options?: any): any;
  /**
  * Deletes data in the data service
  * @param query The delete query to send to the data service
  */
  delete(query: any): void;
  /**
  * Transforms data sent from the data service into a native IDataTable
  * @param data The data returned from the data service
  */
  getResponseTable(data: any, jqXHR?: any): IWireDataTable;
  /**
  * Transforms a JavaScript object with the same data structure as a data soure into an IWireDataSource object
  * @param obj The object to be cast
  */
  cast(obj: any): IWireDataSource;
}

//{ Entity: "Sproc_GetStationContract", Name: "amt_ordered", Format: "C2" },

interface IWireDataModelField {
  /**
  * Table or other entity name to which model meta data will be applied
  */  
  Entity: string;
  /**
  * Field name containing to which model meta data will be applied
  */  
  Name: string;
  /**
  * Friendly name to use for the field.  This will be used as the title instead of the field name in any UI components.
  */  
  Alias?: string;
  /**
  * Numeric formatting for the field
  */  
  Format?: any;
  /**
  * Aggregation function to be used with this field.
  * @default SUM
  */
  Aggregate?: "SUM" | "AVG" | "COUNT" | "MAX" | "MIN" | "NONE";
  /**
  * Holds any custom meta data
  */
  Custom?: any;     
  /**
  * Creates a calcualted field on any data table returned from a query that contains *Entity*
  */
   Calc?: (DataTableColumnCalc);  
}

interface IWireDataModelRelationship {
  /**
  * First table or other entity in the join
  */
  Entity1: string;
  /**
  * Field in the first table or other entity in the join
  */
  Field1: string;
  /**
  * First table or other entity in the join
  */
  Entity2: string;
  /**
  * Field in the first table or other entity in the join
  */
  Field2: string;
}

interface IDataModel {
  /**
  * Array of fields containing data model meta data
  */
  Fields?: Array<IWireDataModelField>;
  /**
  * Array of fields to be considered in the query for entity mappings (joins)
  */
  Relationships?: Array<IWireDataModelRelationship>;
}

/**
* WireBootstrap wire.data.DataModel class
@see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.data/wire.data.datamodel
*/
interface IWireDataModel extends IDataModel {
  new(config?: IDataModel): IWireDataModel;
  /**
  * Transforms a JavaScript object with the same data structure as a data model into an IWireDataModel object
  * @param obj The object to be cast
  */
   cast(obj: any): IWireDataModel;
    /**
    * Returns the specified *field* from the Fields array
    * @param field The name of the field
    * @param entity Optional entity for the field
    */
     getField(field: string, entity?: string): IWireDataModelField;   
}

/**
* Base data service query interface
*/
interface IWireQuery {
}

interface IWireTableQueryField {
  /**
  * Table or other entity name on which the field exists
  */  
  Entity?: string;
  /**
  * The name of the field to include in the select list
  */  
  Name: string;
  /**
  * Friendly name to use for the field in the query
  */  
  Alias?: string;
  //Aggregate?: any; // there is no method to set this right now
  /**
  * Alias used for the field in data event listeners
  */  
  EventName?: string;
}

interface IWireTableQueryGroupByField {
  /**
  * The name of the field used to group rows
  */
  Field: string;
  /**
  * Friendly name to use for the group by field
  */
  Alias?: string;
}

interface IWireTableQueryOrderByField {
  /**
  * The name of the field used to order rows
  */
  Field: string;
  /**
  * Optional. Entity qualifer for *Field*
  */
  Entity?: string;
  /**
  * Determines whether the sort order will be descending
  * @default false
  */
  Desc?: boolean;
}

/**
* WireBootstrap wire.data.TableQuery class
* Create a new instanced using wire.data.select() method
@see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.data/wire.data.tablequery
*/
interface IWireTableQuery extends IWireQuery {
  new(): IWireTableQuery;
  /**
  * List of select fields in the query
  */
  Fields: Array<IWireTableQueryField>;
  /**
  * List of filter fields in the query
  */
  Filter: Array<any>;
  /**
  * List of joins in the query
  */
  Joins: Array<any>;  
  /**
   * List of group by fields in the query
   */
  GroupBy: Array<IWireTableQueryGroupByField>; 
  /**
  * List of order by fields in the query
  */
  OrderBy: Array<IWireTableQueryOrderByField>;   
  /**
  * Specify that a distinct list of rows be returned
  */
  distinct(): IWireTableQuery;
  /**
  * Specify that only the top *N* rows be returned
  * @param N The number of rows to return
  */
  top(N: number): IWireTableQuery;
  /**
  * A list of comma separated field names to return in the results
  */
  fields(...args: string[]): IWireTableQuery;
  /**
  * Adds an individual field to the list of fields to return
  * @param name The name of the field
  */
  field(name: string): IWireTableQuery;
  /**
  * Adds an individual field to the list of fields to return
  * @param name The field object
  */
  field(name: IWireTableQueryField): IWireTableQuery;
  /**
  * The main entity or table name from which the data will be returned
  * @param table The table or entity name
  */
  from(table: string): IWireTableQuery;
  /**
  * Resets the list of filters in the query
  */
  where(): IWireTableQuery;
  /**
  * Resets the list of filters in the query and includes a custom expression
  * @param expression The custom expression
  */
  where(expression: string): IWireTableQuery;
  /**
  * Specify the order in which the records should be returned
  * @param field The field to use to order the records
  * @param desc Boolean that determines whether records should be returned in descending order.  Defaults to false - ascending.
  */
  orderBy(field: string, desc?: boolean): IWireTableQuery;
  /**
  * Join a table or entity to another in the query using an inner join
  * @table The table to join
  * @field The field to join
  */
  join(table: string, field: string): IWireTableQuery;
  /**
  * Join a table or entity to another in the query using a left join
  * @table The table to join
  * @field The field to join
  */
  leftJoin(table: string, field: string): IWireTableQuery;
  /**
  * Join a table or entity to another in the query using a right join
  * @table The table to join
  * @field The field to join
  */
  rightJoin(table: string, field: string): IWireTableQuery;
  /**
  * Used after a join method to specify the second table and field to use in the join
  * @table The table to join
  * @field The field to join   
  */
  on(table: string, field: string): IWireTableQuery;
  /**
  * Used after a join method to join a field using a value 
  * @field The field to join
  * @value The value of the field for the join
  */
  onValue(field: string, value: string): IWireTableQuery;
  /**
  * Adds a filter to the query where *field* is equal to *value*
  * @field The field for the filter
  * @value A value of any type
  * @param entity Optional. The entity qualifier for *field*.
  */
  eq(field: any, value: any, entity?: string): IWireTableQuery;  
  /**
  * Adds a custom expression filter to the query
  * @param exp The expression
  */
  expression(exp: string): IWireTableQuery;  
  /**
  * Add a parameter to a custom web service call
  * @param param The parameter to to the service method
  * @value The value of the parameter
  */
   param(param: string, value: string | number): IWireTableQuery;
  /**
  * Adds a filter to the query where *field* is not equal to *value*
  * @field The field for the filter
  * @value A value of any type
  * @param entity Optional. The entity qualifier for *field*.
  */
  ne(field: string, value: number, entity?: string): IWireTableQuery;
  /**
  * Adds a filter to the query where a field contains any value within the list of *values*
  * @field The field for the filter
  * @values The list of values
  */
  in(field: string, values: Array<any>): IWireTableQuery;
  /**
  * Adds a filter to the query using a custom string *expression* that will be understood by the data service
  * @param expression The custom expression
  */
  expression(expression: string): IWireTableQuery;
  /**
  * Adds a custom JavaScript object containing filter data for the query
  * @param obj The custom object
  */
  custom(obj: any): IWireTableQuery;
  /**
  * Adds a filter to the query where *field* contains *value*
  * @param field The field for the filter
  * @param value The value that must be contained in the field
  */
  contains(field: string, value: string): IWireTableQuery;
  /**
  * Adds a filter to the query where *field* starts with *value*
  * @param field The field for the filter
  * @param value The value with which the field must start
  */
  starts(field: string, value: string): IWireTableQuery;
  /**
  * Adds *field*(s) that will be ignored by the query to start.  
  * However, datasets will then listen for data event changes to these fields and apply the chagnes to the query.
  * @param field The field to add to the query
  * @param entity Optional. The entity qualifier for *field*.
  */
   filter(field: string | Array<string>, entity?: string): IWireTableQuery;
  //eqField(field: string): IWireTableQuery;
  //listen(fields: Array<string>): IWireTableQuery;
  /**
  * Specify that rows be returned in subsets by page
  * @param pageNumber The page number to return.  Most service providers default to 10 rows per page. 
  * Check the service provider documentation for details.
  */
  page(pageNumber: number): IWireTableQuery;
  /**
   * Specify that rows be returned in subsets by page
   * @param pageNumber The page number to return
   * @param rowsPerPage The number of rows per page.  
   */
  page(pageNumber: number, rowsPerPage: number): IWireTableQuery;
  /**
  * Returns an array of filter values for a field in the query
  * @param field The field for which to return filter values
  */
   getFilterFieldValues(field: string): Array<any>;
  /**
  * Removes any filters for the specified field from the query
  * @param field The field for which to remove filters
  */
  clear(field: string): IWireTableQuery;
  /**
  * Transforms a JavaScript object with the same data structure as a table query into an IWireTableQuery object
  * @param obj The object to be cast
  */
   cast(obj: any): IWireTableQuery;
  /**
  * A list of comma separated field names used to group records in the query
  */
   groupBy(...args: string[]): IWireTableQuery;   
  /**
  * Returns a list of IWireTableQueryField objects in either the Fields (select) or Filter (where) properties on the query
  * @param field Optional field name to which to filter the list returned
  * @param entity Optional entity name to which to filter the list returned
  */
   getFields(field?: string, entity?: string): Array<IWireTableQueryField>;
  /**
  * Returns a list of IWireTableQueryField objects in either the Filter (where) properties on the query
  */
  getFilterFields(): Array<IWireTableQueryField>;          
  /**
  * Removes the specified field from the Fields property which determines the fields returned in a query (SELECT)
  * @param field The name of the field to remove
  * @param entity Optional entity/table name that contains the field to be removed
  */
    removeField(field: string, entity?: string): void;
    /**
   * Removes the specified field from the GroupBy property which determines the grouping for a query (GROUP BY)
   * @param field The name of the field to remove
   */
    removeGroupBy(field: string): void;
    /**
   * Removes the specified field from the Filter property which determines what fields are used to filter rows in a query (WHERE)
   * @param field The name of the field to remove
   * @param value Optional field value qualifier.  Only the field with this filter value will be removed.
   * @param entity Optional entity/table name that contains the field to be removed
   */
    removeFilter(field: string, value?: string, entity?: string): void;  
    /**
    * Returns a descriptive label for filter selections
    * @param options Optional.  Options that control how the descriptions are returned.
    */
     getFilterDescription(options?: any): string;    
}

interface IWireStoredProcedureParameter {
/**
 * The name of the parameter
 */
  Name: string;
/**
 * The parameter value
 */
  Value: string | number;
/**
 * The data event alias
 */
  EventName?: string;
  /**
  * Determines whether the intent of the parameter is to be visible in any UI
  */
  Visible?: boolean;  
}

/**
* WireBootstrap wire.data.StoredProcedure class
* Allow programs with parameters to be called in data services
* Create a new instanced using wire.data.procedure() method
@see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.data/wire.data.storedprocedure
*/
interface IWireStoredProcedure extends IWireQuery {
  new(): IWireStoredProcedure;
  /**
  * Creates a new instance specifying the procedure name
  * @param Name The procedure name
  */
  new(Name: string): IWireStoredProcedure;
  /**
  * Creates a new instance specifying the procedure name and parameters
  * @param Name The procedure name
  * @param Params The parameters to use with the procedure
  */
  new(Name: string, Params: Array<any>): IWireStoredProcedure;
  /**
  * The name of the procedure
  */
  Name: string;
  /**
  * The parameters to use with the procedure
  */
  Params: Array<IWireStoredProcedureParameter>;
    /**
    * Stored Procedure options
    */
    Options: any;
    /**
   * Returns the stored procedure Options
   * @param options The optional options to set
   */
    options(options: any): any;  
  /**
  * Returns a parameter with the given *name*
  * @param name The name of the parameter to return
  */
  getParam(name: string): IWireStoredProcedureParameter;
  /**
  * Use this method to add a new paramter to be used with the procedure
  * @param name The name of the parameter
  * @param value The value of the parameter.
  */
  param(name: string, value: any): IWireStoredProcedure;
  /**
  * Use this method to add a new paramter to be used with the procedure
  * @param param The parameter object
  */
  param(param: IWireStoredProcedureParameter): IWireStoredProcedure;
  /**
  * Use this method with the param method to add a data event alias to the parameter
  * @param name The event name of the parameter
  */
  eventName(name: string): IWireStoredProcedure;
  /**
  * Transforms a JavaScript object with the same data structure as a stored procedure into an IWireStoredProcedure object
  * @param obj The object to be cast
  */
  cast(obj: any): IWireStoredProcedure;
  /**
  * Returns a descriptive label for parameters
  * @param options Optional.  Options that control how the descriptions are returned.
  */
  getParamDescription(options?: any): string;   
}


interface IWireDataTableColumn {
  /**
  * The name of the column
  */
  Name: string;
  /**
  * The title of the column to be used in components and other user interface contexts
  */
  Title: string;
  /**
  * Formatting for numeric columns
  */
  Format: any;
  /**
  * The type of data in the column
  */
  DataType: string;
}

/**
* WireBootstrap wire.data.DataTable class
@see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.data/wire.data.datatable
*/
interface IWireDataTable {
  new(): IWireDataTable;
  /**
  * Creates a new data table from an array of objects.  Columns will automatically be created from the properties of the objects.
  * @param Rows The array of objects
  */
  new(Rows: Array<any>): IWireDataTable;
  /**
  * Creates a new data table from an array of objects
  * @param Rows The array of objects
  * @param Columns An array of data table columns
  */
  new(Rows: Array<any>, Columns: Array<IWireDataTableColumn>): IWireDataTable;
  /**
  * The rows of the data table
  */
  Rows: Array<any>;
  /**
  * The columns of the data table
  */
  Columns: Array<IWireDataTableColumn>;
  /**
  * A commma delimited list of columns names to select
  */
  select(...args: string[]): IWireDataTable;
  /**
  * Select a single column by name
  * @param name The column name
  */
  column(name: string): IWireDataTable;
  /**
  * Select an array of column names
  * @param names The column names
  */
  columns(names: string[]): IWireDataTable;  
  /**
  * Select a single column by its object
  */
  column(column: IWireDataTableColumn): IWireDataTable;
  //columns(...args: string[]): IWireDataTable;
  /**
  * Add a column using its name
  * @param name The column name to add
  */
  addColumn(name: string): IWireDataTable;
  /**
  * Add a column object
  * @param column The IDataTableColumn column object to add
  */
  addColumn(column: IWireDataTableColumn): IWireDataTable;
  /**
  * Add a title to a column.  Use this with the addColumn or column methods.
  * @param title The column title
  */
  title(title: string): IWireDataTable;
  /**
  * Specify a columns data type.  Use this with the addColumn or column methods.
  * @param type The column data type
  */
  type(type: string): IWireDataTable;
  /**
  * Specify column formatting.  Use this with the addColumn or column methods.
  * @param template The format template to use for the column
  */  
  format(template: string): IWireDataTable;
  /**
  * Returns a column from the data table or null if the column name does not exist.
  * @param name The name of the column.
  */
  getColumn(name: string): IWireDataTableColumn;
  /**
  * Removes a column from the data table
  * @param name The name of the column to remove
  */
  removeColumn(name: string): IWireDataTable;
  /**
  * Change the name of a column
  * @param OldName The original name of the column
  * @param newName The new name for the column
  */
  renameColumn(oldName: string, newName: string): IWireDataTable;
  /**
  * Used with the *addColumn* method to create a calculated column
  * Used with the *where* method to filter rows.
  * Used with *update* to update the values of a data table column
  * Used with *delete* to delete rows in a data table
  * @param fn The calculation function
  */
  calc(fn: DataTableColumnCalc): IWireDataTable;
  /**
  * Use with addColumn to set the value for all rows to a static value
  * @param value The value to set for all rows in the new column
  */
  value(value: any): IWireDataTable;
  /**
  * Used with the select method to select a column but change the name when the new select is evaluated
  * @param name Theh new name of the column in the evaluated output
  */
  as(name: string): IWireDataTable;
  /**
  * Returns the first row in a new select on a data table.  Returns null if no rows are returned from the evaluation.
  */
  first(): any;
  /**
  * Returns the first row in a new select on a data table.  Returns an empty object {} if no rows are returned from the evaluation.
  */
  firstOrDefault(): any;
  /**
  * Returns a boolean specifying whether any rows exists in a new select on a data table
  */
  exists(): boolean;
  /**
  * Returns the value of the first property on the first row that returns from a new select on a data table.  
  * The assumption is that the select returns only one row and one column but will handle multiple rows and columns per this rule.
  */
  scaler(): any;
  /**
  * Returns the rows evaluated from a new select on a data table.
  */
  rows(): Array<any>;
  /**
  * Starts a fitler on a data table.  Clears any previous filters that may have been craeted on a method chain.
  */
  where(): IWireDataTable;
  /**
  * When used with the *where* method, creates a filter for rows where *column* is equal to *value*
  * When used with *delete* method, removes rows where *column* is equal to *value*
  * @param column The column 
  * @param value The value
  */
  eq(column: string, value: any): IWireDataTable;
  /**
  * When used with the *where* method, creates a filter for rows where *column* is not equal to *value*
  * When used with *delete* method, removes rows where *column* is not equal to *value*
  * @param column The column 
  * @param value The value
  */
  ne(column: string, value: any): IWireDataTable;
  /**
  * Creates a filter for rows where *column* contains *value*
  * @param column The column on which to filter
  * @param value The value to use for the filter
  */
  contains(column: string, value: any): IWireDataTable;
  /**
  * Creates a filter for rows where *column* starts with *value*
  * @param column The column on which to filter
  * @param value The value to use for the filter
  */
  starts(column: string, value: any): IWireDataTable;
  /**
  * Evaluates to a new data table after calling a new select on a data table
  * @returns A new DataTable object
  */
  table(): IWireDataTable;
  /**
  * Transforms a JavaScript object with the same data structure as a data table into an IWireDataTable object
  * @param obj The object to be cast
  */
   cast(obj: any): IWireDataTable;    
  /**
  * Aggregates a numeric column by totaling all of its values
  * * @param column The column on which to filter
  * @parm column The column to aggregate
  */
  sum(column: string): IWireDataTable;
  /**
  * Returns the count of rows evaluated from a new select on a data table
  * Aggregates a numeric column by counting all of its values
  * @parm column The column to aggregate
  */
  count(column: string): number;
   /**
  * Returns the largest value for the *field*
  * @parm column The column to aggregate
  */
  max(column: string): IWireDataTable;
  /**
  * Returns the smallest value for the *field*
  * @parm column The column to aggregate
  */
  min(column: string): IWireDataTable;
  /**
   * Aggregates a numeric column using an arithmetic mean / average all of its values
   */ 
  avg(column: string): IWireDataTable;
  /**
  * Starts an update method chain for a column in a data table
  * @param column The column to update
  */  
  update(column: string): IWireDataTable;
  /**
  * Returns a new JavaScript object with the same schema as a row in the data table.  Each property on the object has a null value.
  */  
  newRow(): any;
  /**
  * Adds a new row to the data table.
  * @param row The JavaScript object to add as the new row
  * @param first Specifies whether the new row should be added to the beginning of the list of rows in the data table.  Defaults to *false* where the row is added to the end of the list.
  */  
  insert(row: any, first?: boolean): void;
  /**
  * Starts a delete method chain for rows in a data table
  */  
  delete(): IWireDataTable;
  /**
  * Returns a distinct list of values for a column in a data table
  */  
  distinctArray(column: string): Array<any>;
  /**
  * Performs an inner join on a data table to the given *table*
  * @param table The second table on which to join to the data table
  */      
  join(table: IWireDataTable): IWireDataTable;
  /**
  * Performs a left join on a data table to the given *table*
  * @param table The second table on which to join to the data table
  */      
  leftJoin(table: IWireDataTable): IWireDataTable;
  /**
  * Called in a method chain after *join* or *leftJoin* to specify the columns to use with the join
  * @param column1 The column in the data table on which the join method is being called that will be used in the join
  * @param column2 The colunn in the second data table to be used in the join
  */      
  on(column1: string, column2: string): IWireDataTable;
  /**
  * Used with a new select on a data table to specify the order in which rows should be returned
  * @param column The column to use to order the rows
  * @param desc Boolean that determines whether rows should be returned in descending order.  Defaults to false - ascending.
  */      
  orderBy(column: string, desc?: boolean): IWireDataTable;
  /**
  * Used with a new select on a data table to specify that the distinct values for a list of fields be returned when evaluated
  */      
  distinct(...args: string[]): IWireDataTable;
  /**
  * Specify that only the top *N* rows be returned
  * @param N The number of rows to return
  */
   top(N: number): IWireDataTable;
}

/**
* Data passed to a dataset transform method
*/  
interface IWireDataSetTransformData {
  /**
  * Data table returned from the dataset service query
  */
  table: IWireDataTable,
  /**
  * Custom configuration passed into a component data binding in the *dataconfig* property.
  */
  config: any
  /**
  * Source dataset that called the transform method
  */
  dataset: IWireDataSet;
}

type WireDataSetTransformCallback = (table: IWireDataTable) => void;

//const table1 = await this.data.dsProducts.execAsync() as unknown as IDataTable;

interface IWireDatasetWriteConfigData {
/**
* The rows to be sent to the data service
*/  
 rows: Array<any>;
/**
* The dataset that called the function.
*/ 
 self: IWireDataSet;
}

interface IWireDatasetWriteConfig 
{
  /**
  * The table or entity to be updated
  */
  Entity: string;
  /**
  * Any dataset write options
  */
  Options: any;
  /**
  * The fields on *Entity* that make records unique.  Can be used by the data service to determine whether to update an existing record 
  * or add a new one.
  */
  Keys: [string];
  /**
  * A pre-post transform hook that allows a dataset's data to be changed before being sent to the data service for persistence
  */
  Data?(d: IWireDatasetWriteConfigData): Array<any>;
}

type WireDataSet = {
  /**
  * The data source for the dataset
  */
  Source: IWireDataSource,
  /**
  * The query for the dataset
  */  
  Query: IWireQuery;
  /**
  * Optional transform method used to process data after returning from the service call but before being broadcast to data event listeners.
  * @param data Data context for processing the data returned from the service call
  * @param callback Function to call when transform processing is complete
  */
  Transform?(d: IWireDataSetTransformData, callback: WireDataSetTransformCallback): void; // DatSetViewCallback;
  /**
  * Determines whether this dataset listens for data events
  */
  Events?: boolean;
  Write?: IWireDatasetWriteConfig;
}

/**
* WireBootstrap wire.data.DataSet class
@see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.data/wire.data.dataset
*/
interface IWireDataSet extends WireDataSet {
  new(): IWireDataSet;
  /**
  * Creates a new instance with configuration
  * @param config The dataset configuration
  */
  new(config: WireDataSet): IWireDataSet;
  __meta: any;
  /*
  * Contains the textual representation of the *Transform* function.  Is cast into Transform as a JavaScript function when the DataSet is initialized.
  *  Helpful when serializing a DataSet to JSON.
  */
  TransformFn?: string
  /*
   * Casts the textual representation of *transform* into the *Transform* function.
   * @param transform Sets the TransformFn function on the DataSet and then casts the text into a function on the *Transform* property.
   */
  setTransform(transform?: string):void;  
  /**
  * Execute the query against the data source asyncronously
  */
  execAsync(): IWirePromise;
  /**
  * Execute the query against the data source asyncronously and sets up a data event listener 
  * for changes to fields in the query
  */
  execAsyncListen(): IWirePromise;
  /**
  * Writes *data* to a data service to be persisted
  * @param data The data to send to the data service
  * @param options Options for the operation
  */
  write(data: any, options?: any): any;
  /**
  * Returns the internal data received from the results of the dataset query in the data service
  * Optionally sets the internal data in the dataset
  * @param data If passed in, the internal data in the dataset is set to this parameter
  */  
  data(data?: any): any;
  /**
  * Returns the data from the *data* method as DataTable
  */  
  table(): IWireDataTable;
//  refreshData(): IWirePromise;
  refresh(): void;
  // use ensureData call instead of fill or execAsync if using a dataset outside of a component
  // and you want the dataset to listen for updates from components
  //ensureData(): IWirePromise;
  /**
  * Sends out an update to data event promises listening for changes to this dataset's query
  * The internal data is sent out in the update as is as the method does not re-execute the query
  */  
  updatePromises(): void;
  /**
  * Transforms a JavaScript object with the same data structure as a data set into an IWireDataSet object
  * @param obj The object to be cast
  */
  cast(obj: any): IWireDataSet;
  /**
  * Determines whether the dataset listens for data events
  */
   Events?: boolean
}

/**
* Contains the data for the DataEventListenerData.event property
*/
interface IWireDataEventListenerDataEvent {
  /**
  * The name of the data event
  */    
  name: string;
  /**
  * The source of the data event.  This will usually be an instance of IWireComponent.
  */      
  source: any;
}

/** 
* Standard data passed by components when raising data events
*/
interface IWireDataEventData {
  /** 
  * Source data for the event.
  */
  cell: IWireDataEventCell,
  /** 
  * Data row associted with the source data cell
  */
  row: any;
  /**
  * DataTable column associted with the source data cell
  */
  column: IWireDataTableColumn  
  /** 
  * IDataTable associted with the source data cell
  */
  table: IWireDataTable;
  /** 
  * Target action to be applied to the data as a result of the event.
  * @default replace
  */
  action: "add" | "remove" | "clear" |"replace";
}

/**
* The data made available to a listener as a result of a data event
*/      
interface IWireDataEventListenerData {
  /**
  * The native JavaScript event used to raise the data event
  */      
  source: any;
  /**
  * The WireBootstrap data event
  */      
  event: IWireDataEventListenerDataEvent;
  /**
  * The data sent out by the data event manager for the event
  */      
  data: IWireDataEventData;
}

type DataEventListenerEvent = (data: IWireDataEventListenerData) => void;

/**
* Data event listeners allow consumers to catch data changes and react accordingly
*/
interface IWireDataEventListener {
  /**
  * Listens for changes to a dataset with a specific data id
  * @param dataId The dataset id
  */
  dataset(dataId: string): IWireDataEventListener;
  /**
  * Listens for changes to an entity or table
  * @param name The name of the entity
  */
  entity(name: string): IWireDataEventListener;
  /**
  * Listens for changes to a field
  * @param dataId The name of the field
  */
  field(name: string): IWireDataEventListener;
  /**
  * Returns the listener's data
  */
  data(): any;
  /**
  * Function called by the data event manager when the conditions of the listener are met
  */
  when(fn: DataEventListenerEvent): void;
}

/**
* Use the Data Event Manager to manually set up data event listeners
*/  
interface IWireDataEventManager {
  /**
  * Creates a new custom data event listener
  */
  event(name: string): IWireDataEventListener;
  /**
   * Creates a standard *datawrite.wire* data event listener
   */
  datawrite(): IWireDataEventListener;
  /**
   * Creates a standard *dataselect.wire* data event listener
   */
  dataselect(): IWireDataEventListener;
}

/**
* Use the Data Event class to create new data events and pass data to listeners
*/  
interface IWireDataEvent {
  new(): IWireDataEvent;
  /**
  * Specifies the name of the data event
  * @param name The name of the data event
  */
  event(name: string): IWireDataEvent;
  /**
   * Specifies *datawrite.wire* as the name of the data event
   */
  datawrite(): IWireDataEvent;
  /**
   * Specifies *dataselect.wire* as the name of the data event
   */
  dataselect(): IWireDataEvent;
  /**
   * The source object that raised the event
   */
   source(source: any): IWireDataEvent;
  /**
   * Returns the data that will be sent out in the event
   */
   getData(): IWireDataEventData;
   /**
   * The query expression to be associated with any query that results from the data event
   * @param expression The type name (_typeName) of the query expression
   */
    expression(expression?: string): IWireDataEvent;
    /**
    * The EqualsExpression query to be associated with any query that results from the data event
    */
    eq(): IWireDataEvent;
    /**
    * The NotEqualsExpression query to be associated with any query that results from the data event
    */
    ne(): IWireDataEvent;
    /**
    * The StartsExpression query to be associated with any query that results from the data event
    */
    starts(): IWireDataEvent;
    /**
    * The ContainsExpression query to be associated with any query that results from the data event
    */
    contains(): IWireDataEvent;
    /**
    * The BetweeenExpression query to be associated with any query that results from the data event
    */
    between(): IWireDataEvent;
    /** 
  * The intended action to be taken in the context of a query as a result of the data event
  * @param expression The expression that represents the action to be taken
  * @default replace
  */
    action(action?: "add" | "remove" | "clear" | "replace"): IWireDataEvent;
    /**
   * Tells data event consumers that the intent of the data event is to add this data to queries for the column
   */
    add(): IWireDataEvent;
    /**
   * Tells data event consumers that the intent of the data event is to remove this data from queries in the column
   */
    remove(): IWireDataEvent;
    /**
    * Tells data event consumers that the intent of the data event is to clear this data from queries for the column
    */
    clear(): IWireDataEvent;
    /**
    * Tells data event consumers that the intent of the data event is to replace this data in the column for queries
    */
    replace(): IWireDataEvent;
  /**
   * Sets the data sent out in the data event
   * @param data The data sent out in the data event
   */
   data(data: IWireDataEventData): IWireDataEvent;
  /**
   * Sets the data sent out in the data event
   * @param data The data sent out in the data event
   */
   data(data: IWireDataEventData): IWireDataEvent;
  /**
   * Specifies the source data point that triggered the event
   * @param column The name of the data table column or other field containing the data point
   * @param value The value of the data point
   * @param label The descriptive label for the *column*
   * @param type A string representing the data type of the data point
   */
   cell(column:string, value:any, label?: string, type?: string): IWireDataEvent;
  /**
   * Sets the data table column containing the cell that triggered the event
   * @param column The data table column
   */
   column(column: IWireDataTableColumn): IWireDataEvent;
  /**
   * Sets the row of data containing the data cell that triggered the event
   * @param row The row of data
   */
   row(row: any): IWireDataEvent;
  /**
   * Sets the data table containing the data cell that triggered the event
   * @param table The data table
   */
   table(table: IWireDataTable): IWireDataEvent;
  /**
   * Fires the data event
   */
   raise(): IWireDataEvent;

}

/**
 * WireBootstrap's standard collection class used to manage a lsit of objects
 */
interface IWireCollection {
  new(): IWireCollection;
  /**
   * Creates a new collection instance specifying the list of objects as well as the key into the collection
   * @param key The collection's key into the list.  This will be one of the properties on all the objects in the list.
   * @param collection The list of objects
   */
  new(key: string, collection: Array<any>): IWireCollection;
  /**
   * Sorts the objects in the collection in place
   * @param property The propert of the objects to sort
   */
   sort(property: string): void;  
  /**
   * Returns the number of objects in the collection
   */
  length(): number;
  /**
   * Creates a new collection instance specifying the list of objects as well as the key into the collection
   */
  array(): Array<any>;
  /**
   * Adds an object to the collection.  If the object already exists, it is overwritten with the one passed into the method.
   * @param obj The object to add to the collection
   */
  set(obj: any): void;
//  add(obj: any): any;
//  add(obj: Array<any>): Array<any>;
  /**
   * Removes an object from the collection
   * @param key The key of the object to remove
   */
  remove(key: string): void;
  /**
   * Retrieves an object from the collection
   * @param key The key of the object to retrieve
   */
  get(key: string | number): any;
  /**
   * Returns the index position of an object
   * @param key The key of the object
   */
  index(key: string): number;
  /**
   * Clears all objects from the collection
   */
  clear(): void;
  /**
   * Moves an object from one index position to another within the collection
   * @param fromIndex The objects current index position
   * @param toIndex The target index position to which the object will be moved.
   */
  move(fromIndex: number, toIndex: number): void; 
}

  /**
  * Download API
  */
 interface IWireDownloadConfig {
  /**
  * The name of the file when downloaded
  * @default file.txt
  */
  fileName?: string;
  /**
  * The function to be called when the file has finished downloading
  */
  done?: Function;
  /**
  * The function to be called when the file failed to download
  */
  fail?: Function;
  /**
   The function to be called when the file has finished processing either successfully or not
  */
  finally?: Function;  
  /**
  * The XMLHttpRequest responseType setting used with the request
  * @default blob
  */
  responseType?: string;
  /**
  * The Content-Type header sent with the download request
  * @default 'application/json; charset=utf-8'
  */
  contentType?: string;
  /**
  * Custom data to post with the request.  If this property is set, the call uses an HTTP POST method instead of a GET method.
  */
  data? : any;
  /**
  * The URL to the web service that will send down the file
  */
  url: string;
}

/**
* Use the location function to get information about the browser's current Url location
*/
interface IWireLocation {
  new(): IWireLocation; 
  /**
   * Returns the Url path of the currently executing Javascript file
   */
  currentScript(): string;
  /**
   * Returns the name of the current HTML page in the browser
   */
  pageName() : string;
  /**
   * Returns a query string parameter from the current Url
   * @param param The parameter name
   */
  param(param: string): string;
  /**
  * Return the base Url for the current browser page
  */
  baseUrl(): string;
  /**
   * Remove a parameter from the query in the current Url
   * @param param The parameter to remove
   */
  removeParam(param: string): void;  
}

/**
 * Provides object[key] references to properties on an object
 */
interface IWireNameKeyMap {
  [key: string]: any;
}


/** 
* Individual data point that causes a data event to be raised in components
*/
interface IWireDataEventCell {
  /** 
  * The data table column
  */
  column?: string;
  /** 
  * The individual value 
  */  
  value: any;
  /** 
  * The label for the value
  */
  text?: string;
  /** 
  * The data type of the value
  */
  type?: string;
}

interface IWireValidate {
  field: any;
  value: any;
  component?: IWireComponent;
}

interface IWireComponentConfigValidateFieldCustomConfig {
  value: string | number;
}

type WireComponentConfigValidateFieldCustom = (config: IWireComponentConfigValidateFieldCustomConfig) => string;

/** 
* Standard validation configuration for components that support validation
*/
interface IWireComponentConfigValidateField {
  /** 
  * Name of the field to validate
  */
  name?: string;
  /** 
  * The type of validation to perform
  */
  type?: 'custom' | 'number' | 'value' | 'regex' | 'phone-number' | 'email-address' | 'date';
  /** 
  * The values to use for the 'value' type.  These values are compared to the value in the component for validation.
  */
  values?: Array<string | number>;
  /** 
  * When using the 'value' type, determines whether the comparison to the value in the component should be case-sensitive.
  */
  case?: boolean;
  /** 
  * Determines whether the field requires a value.
  */
  required?: boolean;
  /** 
  * Error message to return if the validation fails.
  */
  error?: string;
  /** 
  * A custom function that handles the validation.
  * @returns An error message if validation fails and null if validation is successful.
  */
  validate?: WireComponentConfigValidateFieldCustom;
  /** 
  * The css class(s) to apply to the component if the validation fails.
  */
  css?: string;
  /** 
  * If true, the 'css' value will be applied to the component's parent. 
  */
  cssParent?: boolean;
}

/** 
* Standard WireBootstrap component event data
*/
type WireComponentEventData = {
  /** 
  * Underlying component or plugin event that raised the WireBootstrap event
  */
  base: any;
  /** 
  * Standard WireBootstrap event data
  * @see https://docs.wirebootstrap.com/wirebootstrap/dataevents
  */
  data: IWireDataEventData;
  /** 
  * WireBootstrap component that raised the event
  */
  component?: IWireComponent
}

/** 
* Standard WireBootstrap component event
*/
type WireComponentEvent = (d: WireComponentEventData) => void;


/**
* One-way observable - Keep an object updated with selects and changes in components
*/
interface IWireComponentConfigModel {
  /**
  * Object to keep updated
  */
  obj?: any;
  /**
  * Property name on the object to set with changes
  */
  property?: string;
  /**
  * Knockout binding - Set this to any Knockout observable to keep the obserable updated with changes
  */
  ko?: any
  /**
  * Set this to "number" for values that should be numeric.
  */
  type?: string;
}

interface IWireComponentConfigEvents{
 /**
    * Raised when a component has finished rendering
    */ 
  ready?: WireComponentEvent;
  /**
  * Raised when a component has finished binding its data.  This includes any new data coming in from a data event.
  */     
  databind?: WireComponentEvent;
}

interface IWireComponentConfig {
  /**
  * The data to bind.  Must be a regular JavaScript array or a wire..data.DataTable or wire.data.DataSet object.
  */
  data?: any;
  /**
  * Maps a component's expected fields in a binding to the actual fields in the data being passed into a component
  */
   datamap?: any;
  /**
  * Standard configuration related specificlly to data binding.  This property is passed into a dataset transform in the *config* property.
  */
   dataconfig?: any;     
  /**
  * An array of fields from the data that the component should ignore 
  */
  hide?: Array<string>;
  /**
  * An array of fields that the component should use.  Other fields are ignored.  This can also be used to control the order fields appear in the component.
  */
  select?: Array<string>;
  /**
  * Validation settings for the component.  Applied when the 'validate' method on the component is called.
  */
  validate?: IWireComponentConfigValidateField;
  /**
  * One-way observable - Keep an object updated with selects and changes in components
  */
  model?: IWireComponentConfigModel;
  /**
  * Determines whether the Spinner spinner is shown over the component when processing its data promise
  * @default true
  */
  spinner?: boolean;
  /**
  * Root property for setting up component event callbacks
  */
   events?: IWireComponentConfigEvents;
  /**
  * Attach any custom data to the configuration here
  */
   custom?: any;
  /**
  * Determines whether the component fires its data event(s)
  * @default true
  */
   dataevent?: boolean | any;   
}

/**
* WireBootstrap wire.ui.Component class
* Most UI components extend this base class
@see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.ui/wire.ui.component
*/
interface IWireComponent {
  new(): IWireComponent;
  /**
  * Creates the HTML DOM elements and data bindings for a component
  * @param element The *id* of the HTML DOM element
  * @param options Any configurataion options for the component
  */
   render(element: string | HTMLElement | JQuery<HTMLElement>, options?: any): IWireComponent;
  /**
  * Used to retrieve the internal configuration for the component after it is rendered
  */
  config(): any;
  /**
  * Returns the intenal data to which the component was bound
  * Often times this is data pulled from a data service and cast into a native WireBootstrap DataTable object.
  */
  data(): any;
  /**
  * Returns the DOM element to which the component is bound
  */
  element(): any;  
  /**
  * Return the JQuery version of *element*
  */
  $element(): any;
  /**
  * If a component uses a third party Jquery plugin internally (often referred to as *wrapping* a plugin), this property will return a reference
  * to the instance of that plugin being used by the component
  */
  plugin: any;
  /**
  * Returns a boolean with the ready state of the component.  
  * If the component has completed rendering, this value will be *true*.  Otherwise, it will be *false*.
  */
  isReady(): boolean;
  /**
  * The function prototype call method
  */
  call(caller: any): void;
  /**
  * Used by classes the extend wire.ui.Component to initialize all it internal objects
  */  
  initialize(config: any): void;  // add config type
  /**
  * Type helper - Returns the same object in the *data* method as an IWireDataTable
  */   
  table(): IWireDataTable;
  /**
  * Creates an instance of a WireBootstrap component from the full name passed in
  * @param name The full name of the component (i.e. 'wire.bsTable')
  */
   create(name: string) : IWireComponent;  
}

  /**
  * WireBootstrap UI spinner API
  */
interface IWireSpinnerConfig extends IWireComponentConfig {
  /**
  * The size of the spinner
  */    
  size?: 1 | 2 | 3 | 4 | 5;
  /**
  * The css class(es) to use for the different spinner sizes
  */       
  css?: {
    size1?:string;
    size2?:string;
    size3?:string;
    size4?:string;
    size5?:string;
  /**
  * Any extra css class(es) to add to the spinner along with the size classes
  */       
    extra?:string;
  }
}

interface IWireSpinner {
  /**
  * 
  * Creates a new spinner instance in the center of the DOM body
  */
  new(): IWireSpinner;
  /**
  * 
  * Creates a new spinner instance attached to the specified DOM element
  * @param el The element to which to attach the spinner
  */
  new(el: string, config?: IWireSpinnerConfig): IWireSpinner;
  /**
  * Specified the spinner size
  * @param size The size of the spinner
  */
  size(size: 1 | 2 | 3 | 4 | 5): IWireSpinner;
  /**
  * Turns the spinner instance on
  */
  on(): IWireSpinner;
  /**
  * Turns the spinner instance off
  */
  off(): IWireSpinner
}


/****************************************************************
    Service Providers 
****************************************************************/

  /**
  * Configuration for using the Table Service Provider with a DataSource running against the WireBootstrap Query Service
  */
interface IWireWireTableServiceProviderConfig {
  /**
  * The query service unique identifer used to authenticate against the query service
  */
  ServiceId: string;
  /**
  * The secret key used to authenticate against the query service
  */
  SecretKey: string;
  /**
  * The connection id registered with the query service
  */
  Connection: string;
}

interface IWireLocalServiceProviderJsonConfig {
  /**
  * The Url to the Json file that contains the data
  */  
  url: string;
}
interface IWireLocalServiceProviderCsvConfig {
  /**
  * The Url to the CSV file that contains the data
  */  
  url: string;
  /**
  * The Papa Parse configuration for reading the CSV file
  * @see https://www.papaparse.com/docs#config
  */  
  papa: any;
}

  /**
  * Configuration for using the Local Service Provider with a DataSource 
  */  
interface IWireWireLocalServiceProviderConfig {
  /**
  * The static data to as the source of data
  */  
  Data: IWireDataTable | Array<any>;
  /**
  * The JSON data to use as the source of data
  */    
  Json: IWireLocalServiceProviderJsonConfig;
  /**
  * The CSV data to use as the source of data
  */    
  Csv: IWireLocalServiceProviderCsvConfig;
}


/**
 * **************************************************************************************
 * 'wire.data' namespace
 * @see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.data
 * **************************************************************************************
 */
interface IWireData {
  /**
  * Listen for data events using the data event manager
  */
  DataEventManager: IWireDataEventManager;
  /**
  * Creates a new source data event
  */
  DataEvent: IWireDataEvent;
  /**
  * Create connections to data services using data sources
  */
  DataSource: IWireDataSource;
  /**
  * Create data service queries that can change base on user interactions with data
  */
  DataSet: IWireDataSet;
  /**
  * Create meta data such as friendly labels and numeric formatting to use with data returned from data services
  */
  DataModel: IWireDataModel;
  /**
  * Work with data service result sets locally in JavaScript using data tables
  */
  DataTable: IWireDataTable;
  /**
  * Create data service queries
  */
  TableQuery: IWireTableQuery;
  /**
  * Execute programs such as stored procedures in data services
  */
  StoredProcedure: IWireStoredProcedure;
  /**
  * Create a new instance of a table query
  */
  select(): IWireTableQuery;
  /**
  * Creates a new instance of a table query with the specified fields
  */
  select(...args: string[]): IWireTableQuery;
  /**
  * Creates a new instance of a table query for making a call to a custom web service
  */
  call(method: string): IWireTableQuery;
  /**
  *
  */
//  call(method: string): IWireTableQuery;
  /**
  * Creates a new request to delete data from a data service
  */
  delete(): IWireTableQuery;
  /**
  * Creaetes a new instance a stored procedure query
  */
  procedure(name: string): IWireStoredProcedure;
}

/**
 * ****************************************************************
 * 'wire.ui' namespace
 * @see https://docs.wirebootstrap.com/wirebootstrap/reference/wire.ui
 * ****************************************************************
 */
interface IWireUi {
  //subMenus(): void;
  //urlDialog(): void;
  /**
  * Creates a UI spinner on a page
  */
  spinner: IWireSpinner;
  /**
  * Validates a value using the specified configuration
  * @param value The value to validate
  * @param config The validation configuration
  */
  validate(value: string | number, config: IWireValidate): string;
  /**
  * Used to extend the base wire.ui.Component from TypeScript
  */
  Component: IWireComponent;
}

/**
 * ****************************************************************
 * Root 'wire' namespace
 * @see https://docs.wirebootstrap.com/wirebootstrap/reference/wire
 * ****************************************************************
 */
interface IWire {
  /**
  * Retrieves a JSON object from a URL and returns JSON object
  */
  get(url: string, options?: any): any;
  /**
  * Retrieves a JSON object from a URL and returns JSON object.  This call blocks the thread until it returns.
  */
  getWait(url: string, options?: any): any;  
  /**
  * Manage an array of objects using a collection
  */
  Collection: IWireCollection;
  /**
  * Get information from the current browser URL and page using the location function
  */
  location: IWireLocation;
  /**
  * Returns a boolean specifying whether the supplied *value* is a number
  * @param value Value to evaluate
  */
  isNumeric(value: any): boolean;
  /**
  * Merges a source JavaScript object into a target.  If the same property exists on both objects, the source value overrides the target.
  * @param target The object into which the source values will be merged
  * @param source The source object
  */
  merge(target: any, source: any): any;
  /**
  * Formats a value using the specified template
  * @param value Value to format
  * @param template The template to use for the format
  * @param data Optional data to pass in.  Helpful when applying a format using a custom function where additional data is needed.
  */
  format(value: any, template: string, data?: any): string;
  /**
  * Make a deep copy of an object
  * @param obj The object to copy
  * @returns  A new object
  */
  copy(obj: any): any;
  /**
  * Used to queue promise resolves into a single callback
  * @param count The number of promises in the queue
  * @param callback The function to call when all of the promises have been resolved
  */
  when(count: number, callback: Function): Function;
  /**
  * Returns *true* if the supplied *value* is a boolean
  * @param value The value to evaluate
  * @param deafultValue If *value* cannot be evaluated, *defaultValue* is returned
  */    
  toBoolean(value: any, defaultValue: boolean): boolean;
  //require(name: string, main?: string, callback?: Function): IWireComponent;
  //requireType(name: string, main?: string, callback?: Function): Function;
  /**
  * Returns a new guid value
  */
  guid(): string;
  /**
  * Splits an array into a subset of arrays
  * @param rows The array to split
  * @param numRows The number of objects (rows) to put into each array subset
  */  
  splitRows(rows: Array<any>, numRows: number): Array<any>;
  /**
  * Downlaods a file from a web service
  * @param config The configuration for the download request
  */
   download(config: IWireDownloadConfig): void;  
  /**
  * The 'wire.data' namespace
  */
  data: IWireData;
  /**
  * The 'wire.ui' namespace
  */
  ui: IWireUi;
}

//
// string extensions
//
interface String {
  /**
  * Replaces bracketed variables with string values passed in as argument.  Example "{0} there".format("hello").
  */
  format(...args: string[]): string;
  /**
  * Replaces bracketed property names in the *row* object with their respective values.
  */
   eval(row: any): string;
  /**
  * Breaks a mixed case single word into multiple words with spaces between each upper case letter.  Example "HelloThereYou" -> "Hello There You"
  */
  splitUpperCaseSpace(): string;
  /**
  * Replaces all instances of *find* with the value in *replace*
  */
  replaceAll(find: string, replace: string): string;  
}

declare const wire: IWire;